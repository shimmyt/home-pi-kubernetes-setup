---
- name: Set timezone
  timezone:
    name: "{{ TIMEZONE }}"

- name: Update and upgrade apt packages
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 86400 #One day

- name: install common apps
  apt:
    name: htop,curl,net-tools,nfs-common,vim,open-iscsi

- import_tasks: security_tasks.yml

- name: Remove useless packages from the cache
  apt:
    autoclean: yes

- name: Add boot line
  lineinfile:
    path: /boot/cmdline.txt
    regexp: '^(console=serial0,115200.*)'
    line: 'cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory \1'
    backrefs: yes
  register: cmdline_updated

- name: check if a reboot is required
  stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: reboot
  reboot:
    reboot_timeout: 1200
    test_command: mount
  when: reboot_required_file.stat.exists or cmdline_updated.changed

# - name: make sure iscsi folders are there
#   file:
#     path: "/mnt/iscsi"
#     state: directory

# - name: iscsi login
#   open_iscsi: 
#     auto_node_startup: yes
#     portal: "192.168.102.20"
#     discover: yes
#     show_nodes: yes
#     login: yes
#   register: iscsi_discovery
#   tags: iscsi

# - name: debug iscsi
#   debug:
#     var: iscsi_discovery
#   tags: [never, iscsi]

# - name: setup iscsi mounts
#   mount:
#     path: "/mnt/iscsi"
#     src: "/dev/sda1"
#     fstype: ext4
#     state: mounted
#     opts: _netdev
#   tags: iscsi

# - name: unmount iscsi
#   mount:
#     path: "/mnt/iscsi"
#     state: absent
#   tags: iscsi

# - name: Disconnect from the cached named target
#   open_iscsi:
#     login: no
#     portal: "192.168.102.20"
#   tags: iscsi

- name: remove k3spersistent mount
  mount:
    path: /k3sconfigs
    state: absent

- name: remove k3spersitent folder
  file:
    path: /k3sconfigs
    state: absent

- name: Make sure nfs folders are there
  file:
    path: "{{ item.path }}"
    state: directory
  with_items: "{{ nfs_mounts }}"

- name: setup mounts
  mount:
    path: "{{ item.path }}"
    src: "{{ item.src }}"
    fstype: nfs
    state: mounted
    opts: rw,hard,intr
  with_items: "{{ nfs_mounts }}"

- name: make sure users are in docker
  user:
    name: "{{ item.name }}"
    groups: 
      - docker
    append: yes
  with_items:
    - "{{ k3s_users }}"
    - { name: pi }

- name: make sure config folders are there
  file:
    path: "/var/data/configs"
    state: directory

- name: sync configs
  command: rsync -avz /mnt/apps/k3spersistent/ /var/data/configs/